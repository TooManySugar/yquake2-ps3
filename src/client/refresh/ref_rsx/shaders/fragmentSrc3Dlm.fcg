unsigned int ito2pow(unsigned int i)
{
	static const unsigned int powers[32] = {
		1,
		2,
		4,
		8,
		16,
		32,
		64,
		128,
		256,
		512,
		1024,
		2048,
		4096,
		8192,
		16384,
		32768,
		65536,
		131072,
		262144,
		524288,
		1048576,
		2097152,
		4194304,
		8388608,
		16777216,
		33554432,
		67108864,
		134217728,
		268435456,
		536870912,
		1073741824,
		2147483648
	};

	return powers[i];
}

struct light_t {
	float3 pos;
	float3 color;
	float intensity;
};

void main
(
	// Passed from vertex shader
	float3 position : TEXCOORD0, // passWorldCoord
	float3 normal : TEXCOORD1, // passNormal
	float2 texcoord : TEXCOORD2, // passTexCoord
	float2 lmcoord : TEXCOORD3, // passLMcoord
	unsigned int lightflags : TEXCOORD4, // passLightFlags

	uniform float overbrightbits,
	uniform float gamma,
	uniform float intensity,

	uniform sampler2D texture,

	uniform sampler2D lightmap0,
	uniform sampler2D lightmap1,
	uniform sampler2D lightmap2,
	uniform sampler2D lightmap3,

	uniform sampler2D dlightmap,

	// not the way - sampling same textures multiple times really slow
	// on RSX
	// uniform sampler1D dlight_pos_vec,
	// uniform sampler1D dlight_color_vec,

	uniform float4 lm0_scale,
	uniform float4 lm1_scale,
	uniform float4 lm2_scale,
	uniform float4 lm3_scale,

	// not the way - array extends to per struct fields
	// meaning - 96 uniform constants in compiled shader which is really huge
	// uniform light_t dlights[32],

	out float4 oColor
)
{
	float4 texel = tex2D(texture, texcoord);

	// apply intensity
	texel.rgb *= intensity;

	// blend lightmaps
	float4 lm_texel = tex2D(lightmap0, lmcoord) * lm0_scale;
	lm_texel       += tex2D(lightmap1, lmcoord) * lm1_scale;
	lm_texel       += tex2D(lightmap2, lmcoord) * lm2_scale;
	lm_texel       += tex2D(lightmap3, lmcoord) * lm3_scale;

	// blend dynamic lightmap
	lm_texel       += tex2D(dlightmap, lmcoord);

	lm_texel.rgb *= overbrightbits;
	oColor = lm_texel * texel;
	// apply gamma correction to result
	oColor.rgb = pow(oColor.rgb, float3(gamma));;

	oColor.a = 1.0; // lightmaps aren't used with translucent surfaces
}
