// It's like lm but makes some weird trick with final lightmap's color
// gl3UniDynLight in C
struct DynLight {
	float3 position; // lightOrigin
	float4 color; // lightColor
};

struct DynLightSet {
	DynLight dynLights[32];
	unsigned int numDynLights;
};

void main
(
	// Passed from vertex shader
	float4 position : TEXCOORD0, // passWorldCoord
	float3 normal : TEXCOORD1, // passNormal
	float2 texcoord : TEXCOORD2, // passTexCoord
	float2 lmcoord : TEXCOORD3, // passLMcoord

	uniform float overbrightbits,
	uniform float gamma,
	uniform float intensity,

	uniform sampler2D texture,

	uniform sampler2D lightmap0,
	uniform sampler2D lightmap1,
	uniform sampler2D lightmap2,
	uniform sampler2D lightmap3,

	uniform float4 lm0_scale,
	uniform float4 lm1_scale,
	uniform float4 lm2_scale,
	uniform float4 lm3_scale,
	
	out float4 oColor
)
{
	float4 texel = tex2D(texture, texcoord);

	// apply intensity
	texel.rgb *= intensity;

	// blend lightmaps
	float4 lm_texel = tex2D(lightmap0, lmcoord) * lm0_scale;
	lm_texel       += tex2D(lightmap1, lmcoord) * lm1_scale;
	lm_texel       += tex2D(lightmap2, lmcoord) * lm2_scale;
	lm_texel       += tex2D(lightmap3, lmcoord) * lm3_scale;


	// process dynamic lightmaps
	// if(passLightFlags != 0u)
	// {
	// 	// TODO: or is hardcoding 32 better?
	// 	for(uint i=0u; i<numDynLights; ++i)
	// 	{
	// 		// I made the following up, it's probably not too cool..
	// 		// it basically checks if the light is on the right side of the surface
	// 		// and, if it is, sets intensity according to distance between light and pixel on surface

	// 		// dyn light number i does not affect this plane, just skip it
	// 		if((passLightFlags & (1u << i)) == 0u)  continue;

	// 		float intens = dynLights[i].lightColor.a;

	// 		vec3 lightToPos = dynLights[i].lightOrigin - passWorldCoord;
	// 		float distLightToPos = length(lightToPos);
	// 		float fact = max(0.0, intens - distLightToPos - 52.0);

	// 		// move the light source a bit further above the surface
	// 		// => helps if the lightsource is so close to the surface (e.g. grenades, rockets)
	// 		//    that the dot product below would return 0
	// 		// (light sources that are below the surface are filtered out by lightFlags)
	// 		lightToPos += passNormal*32.0;

	// 		// also factor in angle between light and point on surface
	// 		fact *= max(0.0, dot(passNormal, normalize(lightToPos)));


	// 		lmTex.rgb += dynLights[i].lightColor.rgb * fact * (1.0/256.0);
	// 	}
	// }

	// lm_texel.rgb *= overbrightbits;
	oColor = lm_texel * texel;
	// apply gamma correction to result
	oColor.rgb = pow(oColor.rgb, float3(gamma));

	oColor.a = 1.0; // lightmaps aren't used with translucent surfaces
}
